var nock = require('nock'),
    setup = require('./setup'),
    request = require('supertest'),
    express = require('express'),
    auth = require('../index'),
    config = require('../config'),
    authFixtures = require('./fixtures/auth_fixture'),
    apps = require('./mocks/app');

describe('routes', function(){
  describe('/auth/user', function() {

    describe('when session exists', function() {
      it('should return user data', function(done) {
        var app = apps.sessionLoggedIn();

        nock(process.env.AUTH_HOST)
          .filteringPath(function(path){
            return '/';
          })
          .get("/")
          .reply(200, authFixtures.validateTokenResponse);

        request(app)
          .get('/auth/user')
          .end(function(err, res){
            expect(res.statusCode).to.eql(200);
            expect(res.body).to.eql(authFixtures.validateTokenResponse);
            done();
          });
      });
    });

  });

  describe('/auth/loginCallback', function() {

    describe('when token is valid', function() {
      it('should redirect you to requested url', function(done) {
        var app = apps.sessionWithRequestedUrl();

        nock(process.env.AUTH_HOST)
          .filteringPath(function(path){
            return '/';
          })
          .get("/")
          .reply(200, authFixtures.validateTokenResponse);


        request(app)
          .get('/auth/loginCallback')
          .query({token: '123'})
          .end(function(err, res){
            expect(res.statusCode).to.eql(302);
            expect(res.headers.location).to.contain('/request');
            done();
          });
      });
    });

    describe('when token is invalid', function() {
      it('should redirect you to requested url', function(done) {
        var app = apps.sessionWithRequestedUrl();

        nock(process.env.AUTH_HOST)
          .filteringPath(function(path){
            return '/';
          })
          .get("/")
          .reply(200, authFixtures.validateTokenResponseError);


        request(app)
          .get('/auth/loginCallback')
          .query({token: '123'})
          .end(function(err, res){
            expect(res.statusCode).to.eql(302);
            expect(res.headers.location).to.contain(config.auth.host);
            done();
          });
      });
    });

  });

  describe('/auth/logout', function() {

    describe('when you logout', function() {
      it('should redirect to auth login page', function(done) {
        var app = apps.session();

        request(app)
          .get('/auth/logout')
          .end(function(err, res){
            expect(res.statusCode).to.eql(302);
            expect(res.headers.location).to.contain(process.env.AUTH_HOST);
            done();
          });
      });
    });

  });

  describe('/auth/loginError', function() {

    describe('when login error', function() {
      it('should return 500', function(done) {
        var app = apps.standard();

        request(app)
          .get('/auth/loginError')
          .end(function(err, res){
            expect(res.statusCode).to.eql(401)
            expect(res.body).to.eql({error: 'Cannot authenticate at this time'})
            done();
          });
      });
    });

  });
});
