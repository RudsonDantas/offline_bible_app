var nock = require('nock'),
    setup = require('../setup'),
    request = require('supertest'),
    express = require('express'),
    authFixtures = require('../fixtures/auth_fixture'),
    auth = require('../../index'),
    config = require('../../config'),
    Requests = require('../../lib/requests'),
    apps = require('../mocks/app');

describe('app middleware', function(){

  describe('when url is blacklisted', function(){
    it('should skip authenticate', function(done) {
      var app = apps.session();

      request(app)
        .get('/free')
        .end(function(err, res){
          expect(res.statusCode).to.eql(200);
          done();
        });
    });
  });

  describe('when logged in', function(){
    it('should call next', function(done) {
      var app = apps.session();

      nock(process.env.AUTH_HOST)
        .filteringPath(function(path){
          return '/';
        })
        .get("/")
        .reply(200, authFixtures.validateTokenResponse);


      request(app)
        .get('/')
        .end(function(err, res){
          expect(res.statusCode).to.eql(200);
          done();
        });
    });
  });

  describe('when not logged in', function(){
    it('should redirect to auth', function(done) {
      var app = apps.session();

      request(app)
        .get('/')
        .end(function(err, res){
          expect(res.statusCode).to.eql(302);
          expect(res.headers.location).to.contain(process.env.AUTH_HOST);
          expect(res.headers.location).to.contain(config.urls.app.loginCallback);
          done();
        });
    });
  });

  describe('when request fails', function() {
    it('should redirect to loginError', function(done) {
      var app = apps.session();

      setup.sandbox.stub(Requests, 'validateToken').callsArgWith(1, {error: 'failed'}, null, null);

      request(app)
        .get('/')
        .end(function(err, res){
          expect(res.statusCode).to.eql(302)
          expect(res.headers.location).to.contain(config.urls.app.loginError);
          done();
        });
    });
  });

});
