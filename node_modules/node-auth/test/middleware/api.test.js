var nock = require('nock'),
    setup = require('../setup'),
    request = require('supertest'),
    express = require('express'),
    authFixtures = require('../fixtures/auth_fixture'),
    auth = require('../../index'),
    config = require('../../config'),
    Requests = require('../../lib/requests'),
    apps = require('../mocks/app');

describe('api middleware', function(){

  describe('when url is blacklisted', function(){
    it('should skip authenticate', function(done) {
      var app = apps.standard();

      request(app)
        .get(config.api.url + '/free')
        .end(function(err, res){
          expect(res.statusCode).to.eql(200)
          done();
        });
    });
  });

  describe('when token is present', function() {

    describe('when token is valid', function() {
      it('should return 200', function(done){
        var app = apps.standard();

        nock(process.env.AUTH_HOST)
          .filteringPath(function(path){
            return '/';
          })
          .get("/")
          .reply(200, authFixtures.validateTokenResponse);

        request(app)
          .get(config.api.url + '/fake')
          .query({token: '123'})
          .end(function(err, res){
            expect(res.statusCode).to.eql(200)
            done();
          });
      });
    });

    describe('when token is not valid', function() {
      it('should return auth status code and error message', function(done){
        var app = apps.standard();

        nock(process.env.AUTH_HOST)
          .filteringPath(function(path){
            return '/';
          })
          .get("/")
          .reply(404, authFixtures.validateTokenResponseError);

        request(app)
          .get(config.api.url + '/fake')
          .query({token: '123'})
          .end(function(err, res){
            expect(res.statusCode).to.eql(404)
            expect(res.body).to.eql(authFixtures.validateTokenResponseError)
            done();
          });
      });
    });

  });

  describe('when token is not present', function() {
    it('should return auth status code and error message', function(done) {
      var app = apps.standard();

      nock(process.env.AUTH_HOST)
        .filteringPath(function(path){
          return '/';
        })
        .get("/")
        .reply(404, authFixtures.validateTokenResponseError);

      request(app)
        .get(config.api.url + '/fake')
        .end(function(err, res){
          expect(res.statusCode).to.eql(404)
          expect(res.body).to.eql(authFixtures.validateTokenResponseError)
          done();
        });
    });
  });

  describe('when request fails', function() {
    it('should return 500 and error message', function(done) {
      var app = apps.standard();

      setup.sandbox.stub(Requests, 'validateToken').callsArgWith(1, {error: 'failed'}, null, null);

      request(app)
        .get(config.api.url + '/fake')
        .end(function(err, res){
          expect(res.statusCode).to.eql(500)
          expect(res.body).to.eql({error: 'failed'})
          done();
        });
    });
  });

});
